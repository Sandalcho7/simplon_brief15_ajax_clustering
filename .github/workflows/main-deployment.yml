env:
  RG_NAME: RG_ab-ajax
  ACR_NAME: abajax
  
  FRONTEND_IMAGE: ab-front
  FRONTEND_CONT: ab-front
  FRONTEND_DNS: ab-front
  
  BACKEND_IMAGE: ab-back
  BACKEND_CONT: ab-back
  BACKEND_DNS: ab-back

on:
  push:
    branches:
      - main

name: Services Deployment

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_GITHUB_SECRET }}

       # Login to Azure Container Registry
      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_NAME }}

      # Build and push frontend Docker image to ACR
      - name: Build and push frontend Docker image
        working-directory: ./frontend
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }}:latest .
          docker tag ${{ env.FRONTEND_IMAGE }}:latest ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:latest
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:latest

      # Build and push backend Docker image to ACR
      - name: Build and push backend Docker image
        working-directory: ./backend
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }}:latest .
          docker tag ${{ env.BACKEND_IMAGE }}:latest ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:latest
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:latest

      # Create Azure Container Instances for frontend and backend
      - name: Create Azure Container Instances
        run: |
          az container create --resource-group ${{ env.RG_NAME }} --name ${{ env.FRONTEND_CONT }} --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:latest --dns-name-label ${{ env.FRONTEND_DNS }} --ports [80] [8001] --protocol TCP
          az container create --resource-group ${{ env.RG_NAME }} --name ${{ env.BACKEND_CONT }} --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:latest --dns-name-label ${{ env.BACKEND_DNS }} --ports [80] [8000] --protocol TCP
